import React, { useState, useEffect } from 'react'
import styles from './Quiz.module.css'
import { quizApi, pdfApi } from '../../utils/api.js'
import CustomSelect from './CustomSelect'

export default function QuizGenerator({ onStart, pdfId, reuseQuizId }) {
  const [difficulty, setDifficulty] = useState('medium')
  const [topic, setTopic] = useState('')
  const [preview, setPreview] = useState(null)
  const [loading, setLoading] = useState(false)
  const [questionTypes, setQuestionTypes] = useState({ MCQ: true, SAQ: false, LAQ: false })
  const [questionCount, setQuestionCount] = useState(10)
  const [selectedPdfTitle, setSelectedPdfTitle] = useState('')

  useEffect(() => {
    // If reuseQuizId is provided, load that quiz immediately and start it
    if (reuseQuizId) {
      loadExistingQuizAndStart(reuseQuizId)
    } else if (pdfId) {
      // If pdfId is provided, fetch that PDF's title
      loadPdfTitle(pdfId)
    }
  }, [pdfId, reuseQuizId])

  const loadExistingQuizAndStart = async (quizId) => {
    setLoading(true)
    try {
      const quiz = await quizApi.getQuiz(quizId)
      // Auto-start the quiz directly without showing intermediate page
      const quizData = {
        quizId: quiz._id,
        difficulty: quiz.difficulty,
        types: quiz.types,
        topic: quiz.topic,
        questions: quiz.questions,
        pdfId: quiz.pdf?._id || pdfId, // Include PDF reference from quiz or URL
        isReattempt: true
      }
      
      // Directly start the quiz
      onStart(quizData)
    } catch (error) {
      console.error('Failed to load quiz:', error)
      
      // Extract detailed error information
      let errorMessage = 'Failed to load quiz. Please try again.'
      if (error.response) {
        console.error('Error response:', error.response.data)
        console.error('Error status:', error.response.status)
        errorMessage = error.response.data?.error || error.response.data?.message || errorMessage
      } else if (error.request) {
        console.error('No response received:', error.request)
        errorMessage = 'Cannot connect to server. Please check if the backend is running.'
      } else {
        console.error('Error message:', error.message)
        errorMessage = error.message
      }
      
      alert(errorMessage)
      setLoading(false)
    }
  }

  const loadPdfTitle = async (id) => {
    try {
      const pdf = await pdfApi.get(id)
      setSelectedPdfTitle(pdf.title || pdf.filename || 'Selected PDF')
    } catch (error) {
      console.error('Failed to load PDF title:', error)
      setSelectedPdfTitle('Selected PDF')
    }
  }

  const getSelectedTypes = () => {
    return Object.keys(questionTypes).filter(type => questionTypes[type])
  }

  const generate = async () => {
    const types = getSelectedTypes()
    if (types.length === 0) {
      alert('Please select at least one question type')
      return
    }

    // Validate that pdfId is provided
    if (!pdfId) {
      alert('PDF is required to generate a quiz')
      return
    }

    setLoading(true)
    try {
      const payload = { 
        pdfId: pdfId,
        difficulty, 
        types, 
        topic: topic || undefined,
        count: questionCount,
        reuseQuizId: reuseQuizId || undefined
      }
      console.log('Generating quiz with payload:', payload)
      const quiz = await quizApi.generate(payload)
      
      // If topic was generated by AI and user didn't provide one, update the input field
      if (!topic && quiz.topic && quiz.topic !== 'General') {
        setTopic(quiz.topic)
      }
      
      // Show preview for all quizzes (removed auto-start behavior)
      setPreview(quiz)
    } catch (error) {
      console.error('Failed to generate quiz:', error)
      
      // Extract detailed error information
      let errorMessage = 'Failed to generate quiz. Please try again.'
      if (error.response) {
        // Server responded with error
        console.error('Error response:', error.response.data)
        console.error('Error status:', error.response.status)
        console.error('Full error data:', JSON.stringify(error.response.data, null, 2))
        errorMessage = error.response.data?.error || error.response.data?.message || errorMessage
      } else if (error.request) {
        // Request was made but no response
        console.error('No response received:', error.request)
        errorMessage = 'Cannot connect to server. Please check if the backend is running.'
      } else {
        // Error in request setup
        console.error('Error message:', error.message)
        errorMessage = error.message
      }
      
      alert(errorMessage)
    } finally {
      setLoading(false)
    }
  }

  const toggleQuestionType = (type) => {
    setQuestionTypes(prev => ({ ...prev, [type]: !prev[type] }))
  }

  // Show loading state while quiz is being loaded for reattempt
  if (loading && reuseQuizId) {
    return (
      <div style={{ maxWidth: '900px', margin: '0 auto', padding: '20px', textAlign: 'center' }}>
        <div className="card" style={{ padding: 24 }}>
          <p>‚è≥ Loading quiz...</p>
        </div>
      </div>
    )
  }

  return (
    <div style={{ maxWidth: '900px', margin: '0 auto', padding: '20px' }}>
      <div className="card" style={{ padding: '32px', marginBottom: 24 }}>
        <h2 style={{ marginTop: 0, marginBottom: 24, fontSize: '24px', fontWeight: 700 }}>
          üìù Generate Quiz {selectedPdfTitle && `for "${selectedPdfTitle}"`}
        </h2>
        
        <div className={styles.configSection}>
          {/* Show locked PDF info */}
          <div className={styles.lockedPdfInfo}>
            <label className={styles.label}>
              Quiz Source
              <div className={styles.lockedPdfBadge}>
                <span className={styles.pdfIcon}>üìÑ</span>
                <span className={styles.pdfTitle}>{selectedPdfTitle}</span>
                <span className={styles.lockedIcon}>üîí</span>
              </div>
            </label>
          </div>

          <label className={styles.label}>
            Topic (Optional - AI will auto-generate if left empty)
            <input 
              value={topic} 
              onChange={(e) => setTopic(e.target.value)} 
              placeholder="e.g., Machine Learning, Calculus (or leave empty for AI generation)" 
              className={styles.input}
            />
          </label>

          {/* Difficulty and Question Count in a row */}
          <div className={styles.formRow}>
            <label className={styles.label} style={{ flex: 1 }}>
              Difficulty Level
              <CustomSelect
                value={difficulty}
                onChange={setDifficulty}
                options={[
                  { value: 'easy', label: 'Easy', icon: 'üòä' },
                  { value: 'medium', label: 'Medium', icon: 'üéØ' },
                  { value: 'hard', label: 'Hard', icon: 'üî•' }
                ]}
                label="Select Difficulty"
              />
            </label>

            <label className={styles.label} style={{ flex: 1 }}>
              Number of Questions
              <div className={styles.numberInputWrapper}>
                <button 
                  type="button"
                  className={styles.numberBtn}
                  onClick={() => setQuestionCount(Math.max(1, questionCount - 1))}
                  disabled={questionCount <= 1}
                >
                  ‚àí
                </button>
                <input 
                  type="number" 
                  value={questionCount} 
                  onChange={(e) => setQuestionCount(Math.max(1, Math.min(20, parseInt(e.target.value) || 10)))} 
                  min="1" 
                  max="20"
                  className={styles.numberInput}
                />
                <button 
                  type="button"
                  className={styles.numberBtn}
                  onClick={() => setQuestionCount(Math.min(20, questionCount + 1))}
                  disabled={questionCount >= 20}
                >
                  +
                </button>
              </div>
            </label>
          </div>

          {/* Question Types in single line */}
          <div className={styles.questionTypesSection}>
            <span className={styles.label}>Question Types:</span>
            <div className={styles.checkboxGroupHorizontal}>
              <label className={styles.checkboxModern}>
                <input 
                  type="checkbox" 
                  checked={questionTypes.MCQ} 
                  onChange={() => toggleQuestionType('MCQ')}
                />
                <span className={styles.checkboxLabel}>
                  <span className={styles.checkmark}></span>
                  MCQ (Multiple Choice)
                </span>
              </label>
              <label className={styles.checkboxModern}>
                <input 
                  type="checkbox" 
                  checked={questionTypes.SAQ} 
                  onChange={() => toggleQuestionType('SAQ')}
                />
                <span className={styles.checkboxLabel}>
                  <span className={styles.checkmark}></span>
                  SAQ (Short Answer)
                </span>
              </label>
              <label className={styles.checkboxModern}>
                <input 
                  type="checkbox" 
                  checked={questionTypes.LAQ} 
                  onChange={() => toggleQuestionType('LAQ')}
                />
                <span className={styles.checkboxLabel}>
                  <span className={styles.checkmark}></span>
                  LAQ (Long Answer)
                </span>
              </label>
            </div>
          </div>

          <div className={styles.buttonGroup}>
            <button 
              className={`btn ${styles.generateBtn}`}
              onClick={generate} 
              disabled={loading}
            >
              {loading ? '‚è≥ Generating...' : '‚ú® Generate Quiz'}
            </button>
            {preview && (
              <button 
                className={`btn ${styles.startBtn}`}
                onClick={() => onStart(preview)}
              >
                üéØ Start Quiz
              </button>
            )}
          </div>
        </div>
      </div>

      {preview && !preview.isReattempt && (
          <div className="card" style={{ padding: 24 }}>
            <h3 style={{ marginTop: 0, marginBottom: 20, fontSize: '20px', fontWeight: 700 }}>
              üìã Quiz Ready
            </h3>
            <div className={styles.previewInfo}>
              <span className={styles.badge}>{preview.difficulty}</span>
              <span className={styles.badge}>{preview.questions.length} Questions</span>
              <span className={styles.badge}>{preview.types.join(', ')}</span>
              {preview.topic && <span className={styles.badge}>Topic: {preview.topic}</span>}
            </div>
            <div className={styles.previewSummary}>
              <p className={styles.previewMessage}>
                ‚ú® Your quiz has been generated successfully! Click "Start Quiz" above to begin.
              </p>
              <div className={styles.previewStats}>
                <div className={styles.statCard}>
                  <span className={styles.statIcon}>üìù</span>
                  <span className={styles.statNumber}>{preview.questions.length}</span>
                  <span className={styles.statLabel}>Questions</span>
                </div>
                <div className={styles.statCard}>
                  <span className={styles.statIcon}>‚ö°</span>
                  <span className={styles.statNumber}>{preview.difficulty}</span>
                  <span className={styles.statLabel}>Difficulty</span>
                </div>
                <div className={styles.statCard}>
                  <span className={styles.statIcon}>üìö</span>
                  <span className={styles.statNumber}>{preview.types.length}</span>
                  <span className={styles.statLabel}>Question Types</span>
                </div>
              </div>
            </div>
          </div>
        )
      }
    </div>
  )
}
